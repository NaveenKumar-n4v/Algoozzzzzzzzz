#include <bits/stdc++.h>
using namespace std;
#define endl "\n"
#define ll long long
#define pb push_back
#define array_size(type) ((char *)(&type+1)-(char*)(&type))
#define MOD 1000000007
#ifndef ONLINE_JUDGE
#define debug(x) cerr<<#x<<" "<<x<<endl;
#else
#define debug(x)
#endif
template<typename KeyType, typename v1ueType>
std::pair<KeyType, v1ueType> get_max( const std::map<KeyType, v1ueType>& x ) {
	using pairtype = std::pair<KeyType, v1ueType>;
	return *std::max_element(x.begin(), x.end(), [] (const pairtype & p1, const pairtype & p2) {
		return p1.second < p2.second;
	});
}
/*
	(a+b)%m = ((a%m)+(b%m))%m
	(a*b)%m = ((a%m)*(b%m))%m
	(a-b)%m = ((a%m)-(b%m) + m)%m
*/
void solve()
{
	//subarray;
	// calculating subarrays of size 3
	int arr[] = {1, 4, 2, 5, 3, 4, 5};
	int n = 7;
	vector<int>prefix(n);
	prefix[0] = arr[0];
	for (int i = 1; i < n; ++i)
	{
		prefix[i] += prefix[i - 1] + arr[i];
	}
	int k = 3;
	int answer = INT_MIN;
	for (int i = 0; i <= n - k; i++) {
		int left = i;
		int right = i + k - 1;
		if (i == 0) {
			// cout << prefix[right] << endl;
			answer = max(answer, prefix[right]);
		}
		else {
			// cout << prefix[right] - prefix[left - 1] << endl;
			answer = max (answer, prefix[right] - prefix[left - 1]);
		}
	}
	cout << answer;
}
signed main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("error.txt", "w", stderr);
#endif
	ll t = 1;
	// cin >> t;
	while (t--) solve();
	return 0;
}
